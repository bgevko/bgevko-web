DROP TABLE IF EXISTS `BlogPosts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `BlogPosts` (
  `postID` int NOT NULL AUTO_INCREMENT,
  `content` text NOT NULL,
  `slug` varchar(255) NOT NULL,
  PRIMARY KEY (`postID`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
INSERT INTO `BlogPosts` VALUES (2,'---\ntitle: Why Programmers Can\'t Use Software\ndescription: If there\'s an API, we\'ll program the software instead of using it.\ndate: \"2023-12-04\"\nimage: \'https://images.unsplash.com/photo-1453928582365-b6ad33cbcf64?q=80&w=3273&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\'\ntags:\n  - Non-technical\n  - Satire\n---\n\nI\'ve been a programmer for over 1 year. I\'ve worked on everything from \nHello World software to a to-do app. I\'ve worked on projects that have \none user and projects that have zero users. I\'ve worked on projects that \nhave never been used by the public and projects that have never been used by \nme. But let\'s not focus on my credentials; they\'re solid, trust me, bro. \nSome guy on the internet said the following at some time:\n> If there\'s an API, we\'ll program the software instead of using it.\n> \n> ~ Me, and probably someone else\n\nI don\'t know what an API is, but if I\'m ever using software that has an API, \nI\'ll most definitely start programming it instead of using the software. \nEspecially if I\'m supposed to be doing something else with the software. I \nwon\'t do the thing that I\'m supposed to be doing; I\'ll fiddle with the API \ninstead to streamline my workflow.\n\nJust the other day, I decided to take a break from my Hello World app and \nproduce music with Reaper, a digital audio workstation. What did I make?\nA script that makes music production easier. I didn\'t actually use the\nscript to make music; I just spent three days building the script and \nthen I went back to programming my Hello World app. My life has no creative\nfullfillment, but at least I know that when I go back to making music again,\nthat script is there waiting for me, begging for me to refactor it.\n\nWhy do programmers do this? We can\'t help it. We don\'t use software, we program it. \nUnless we\'re supposed to use the software to program the software. No, wait, \nwe\'ll program the software to program the software too. Oh, how is my \nHello World app doing? Not good. I haven\'t worked on it because I\'m too \nbusy configuring my Neovim setup.\n','api-problem'),(3,'---\ntitle: Reflecting on 2023\ndescription: In this short article, I reflect on my technical progress from 2023 and set some new goals for the upcoming year.\ndate: 2024-01-01\nimage: https://images.unsplash.com/photo-1699275303964-a9a1a8ae8c6b?q=80&w=3270&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\ntags:\n  - Non-Technical\n  - 2024\n---\n\n2023 was an incredibly fruitful year regarding my development as a.. developer. Here are some of the things I worked on:\n- Created a static website for my biology final.\n- Created a random data generator tool with `React` with a responsive web UI\n- Created some scripts for my music hobbies for both Reaper and Renoise digital audio workstations, \nexposing me `Lua`. \n- Created a personal portfolio site with `React`. Then, I built it again in `NextJS` from scratch. \n- Ditched VS Code in favor of a custom Neovim setup. Those Lua skills came in handy when I spent a week building out my editor configurations. \n- Built a C++ command line program that converted ripped SNES music (SPC format) to playable/remixable WAV format for music production. \n- Created a command line tool that fetches my previously defined coding templates from a GitHub repo. This makes creating prototypes and starting new projects a breeze!\n- Built a content management system with `Markdown` and `React`. I built it again for my new site using `MDX`. I learned so much about building and rendering content through markdown!\n- Learned how to deploy my projects on a virtual private server. \n- Created a basic 3D rendering application with `C++` and `OpenGL`.\n- Completed Data Structures & Algorithms, Web Development, Computer Architecture & Assembly, Introduction to Computer Graphics Programming, and Operating Systems 1. These courses tied many previously loosely understood concepts together for me. \n- Registered for the Codepath iOS course, which will guide me through building an iOS app in February 2024. \n\nDespite the majority of 2023 feeling like I wasn\'t making any technical progress (I spent over half the year focusing on non-CS general education requirements for my degree), I\'m delighted with my overall output.\n\nI\'m certain that I\'ll see even more growth in 2024. Here is a list of goals that I hope to accomplish this year:\n- Finish [this](https://berrin-com.vercel.app/) website.\n- Create a landing page/booking system for a nail technician.\n- Create a 3D website using `Three.js`.\n- Create a space on my website to host my GLSL shader creations.\n- Create a metronome app for iOS. \n- Find an internship.\n\nMost of my curriculum is filled with CS-related work this year, so I hope to blow this list out of the water. I\'ll check on this in a year and see how I did. \n\nIf you made it this far, thanks for reading! There is no call to action or newsletter subscription; I genuinely appreciate your time!\n','2023-reflection');
DROP TABLE IF EXISTS `NotesPosts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `NotesPosts` (
  `postID` int NOT NULL AUTO_INCREMENT,
  `content` text NOT NULL,
  `slug` varchar(255) NOT NULL,
  PRIMARY KEY (`postID`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
INSERT INTO `NotesPosts` VALUES (1,'---\ncategory: C/C++\ntitle: Build Script\ndescription: Sometimes, simple programs don\'t require the full power of CMake, but it can also get tedious to build your program every time with terminal commands. I have just the solution for such cases.\ndate: \"2023-10-06\"\ntags:\n  - C++ \n  - C\n---\n\nSuppose you have a program that you\'re building and you constantly find yourself in the following pattern:\n- Make changes to the code\n- Close the current running instance\n- Build the program\n- Execute the program\n\nThis can become very tedious, especially if you\'re like me and like to check your work frequently. You can create a bash script to automate this process for you.\n\n- Create a new file and call it something like `rebuild.sh`\n\n```bash\n#!/bin/bash\n\n# Kill the current process (assuming it\'s named \'sample\')\npkill -f ./sample\n\n# Compile the code, I have a makefile, but you can write your own build command here\nmake\n\n# Run the program\n./sample\n```\n- Give the file permission to execute:\n```bash\nchmod +x rebuild.sh\n```\n\nNow, you can run `./rebuild` and you just saved yourself a couple commands. You can add anything into the build script.\n\n','build-script'),(2,'---\ncategory: C/C++\ntitle: CMake Cheatsheet\ndescription: CMake tips and tricks to help jumpstart a C++ project.\ndate: \"2023-10-06\"\ntags:\n  - CMake\n  - C++\n---\n\n## Create a new build\n```bash\n# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.2)\n\n# Define the name of the project. This name is used for organizational purposes\n# and does not determine the names of any output binaries.\nproject(MyProject)\n\n# Add an executable target to the project. This command specifies that an \n# executable named MyApp should be built from the source file main.cpp.\n# You can add more source files separated by spaces if needed.\nadd_executable(MyApp main.cpp)\n\n# (Optional) If you have other source files or libraries to include, \n# you can use commands like `target_link_libraries` or `target_include_directories`.\n```\n```Cpp\n// main.cpp:\n#include <iostream> \nint main(){   std::cout << \"Hello World!\" << std::endl;   return 0; }\n```\n```Bash\n# Create a build folder\nmkdir build \ncd build \ncmake -S .. -B . # S and D flags represent source dir and build dir\n```\n```Bash\n# Build the project\nmake # (from the build directory)\n```\n## Adding a library\nCreate a new directory, `my_library` (or any name). I\'ll create an example library calledÂ `adder`. I\'ll also create two files in this directory: `adder.h` and `adder.cpp`.\n``` Cpp\n// adder.h:\nnamespace mymath{ 	int add(int a, int b); 	float add(float a, float b); }\n```\n```cpp\n// adder.cpp:\n#include \"adder.h\" int mymath::add(int a, int b){ 	return a + b; } float mymath::add(float a, float b){ 	return a + b; }\n```\n```bash\n# CMakeLists.txt:\ncmake_minimum_required(VERSION 3.2) \nproject(MyProject) \nadd_executable(MyApp main.cpp)\n\n# Add the library directory to the include path. This is where the \n# header file is located.\ninclude_directories(my_library)\n\n# Add the library. First argument is what you want to name the target,\n# and the second argument is the path to the library source files.\nadd_library(Adder my_library/adder.cpp) \n\n# Link the library to the executable. and INTERFACE. \ntarget_link_libraries(MyApp PRIVATE Adder)\n```\n<Callout>\nNote that `PRIVATE` represents the visibility of the library. `PRIVATE` means that the library is only used by the target. Other options are `PUBLIC` and `INTERFACE`. `PUBLIC` means that the library is used by the target and any targets that link to this target. `INTERFACE` means that the library is used by any targets that link to this target, but not the target itself. \n\nIn our case, the target is `MyApp`, but bigger projects may have multiple targets, so the visibility options are a powerful way to control dependencies.\n</Callout>\n```cpp\n// main.cpp\n#include <iostream> \n#include \"adder.h\" \nint main()\n{     \n	int a = 1;     \n	int b = 2;     \n	std::cout << \"a + b = \" << mymath::add(a, b) << std::endl;     \n	return 0; \n}\n```\n\nWith this setup, we can go to the **build**Â directory and build the project:\n```bash\ncd build\nmake\n```\n\n## Linking a compiled library\n\nThe above approach works for linking a library when you have access to the source code and you want to compile the library yourself.\nHowever, sometimes you may not have access to the library source code. Sometimes, you only have access to the compiled library file. \nNote that compiled libraries still need a header file to use them.\nCompiled libraries usually have these file extensions:\n\n**STATIC**: `.a`, `.lib`\n\n**SHARED**: `.so`, `.dll`, `.dylib`\n\n<Callout>\nNote that `.lib` and `.dll` are used on Windows, `.a` and `.so` are used on Linux, and `.a` and `.dylib` are used on macOS.\n</Callout>\n\nStatic means that a library will be compiled into your executable. This means that the library code is \"embedded\" into your final application. \nIf multiple executable files use it, then the library code will be duplicated in each of them. \n\nA shared library is not embedded into your application. Instead, it is loaded at runtime. This means that if multiple executable files use it, \nthen the library code will be loaded only once in memory. However, this also means that you need to distribute the library \nfile with your application and make sure that the library is available on the user\'s machine. Static libraries are usually easier to use, \nbut shared libraries are more efficient. Here\'s how to link a pre-compiled library:\n\nIn this example, I\'ll use two files in theÂ `my_library`Â directory:\n```bash\nlibAdder.a # static library\nadder.h    # library header file\n```\n```bash\n# CMakeLists.txt\ncmake_minimum_required(VERSION 3.2) \nproject(MyProject) \nadd_executable(MyApp main.cpp) \ninclude_directories(my_library) \ntarget_link_libraries(MyApp PRIVATE ${CMAKE_SOURCE_DIR}/my_library/libAdder.a)\n```\n\nI\'m including the header file in the `my_library` directory, then I\'m calling `target_link_libraries` \nthe same way as before, but this time linking to the `a` file. Although I\'m linking a static library,\nthe approach is the same for the other types as well.\n\nNote that `CMAKE_SOURCE_DIR` is part of the Cmake API and it represents the root directory where `CMakeLists.txt` is located.\n','cmake-cheatsheet'),(3,'---\ncategory: Web Development\ntitle: CSS Tricks\ndescription: Cool tricks that I don\'t want to forget.\ndate: \"2023-12-05\"\ntags:\n  - CSS\n---\n\n## Reactive modal\nSet width to `700px`. If the screen is too small, the width will be `90%`. If the screen is too big, the width will be `50%` of the screen. Useful for modals.\n\n```css\nmodal {\nwidth: clamp(50%, 700px, 90%);\nheight: min(50%, 300px);\n}\n```\n','css-tricks'),(4,'---\ncategory: Web Development\ntitle: Curl Requests\ndescription: Send HTTP requests from the command line with curl.\ndate: \"2023-11-16\"\ntags:\n  - Linux\n  - HTTP\n---\n\n### GET\n```bash\ncurl https://example.com\n```\n\n### POST\n```bash\n# Simple request with no body\ncurl -X POST http://localhost:3000/confirm\n```\n```bash\n# Headers and JSON body\ncurl -X POST http://localhost:3000/confirm -H \"Content-Type: application/json\" -d \'{\"key\":\"value\"}\'\n```\n```bash\n# Send data from a file\ncurl -X POST http://localhost:3000/confirm -d @path/to/json\n```\n\nTo be continued...\n','curl-requests'),(6,'---\ncategory: C/C++\ntitle: GCC Snippets \ndescription: Reference for how to use the GCC compiler\ndate: 2023-09-23\ntags:\n  - C\n  - GCC\n---\n\n## Compile a C program using c99 standard\n```bash\ngcc -std=c99 main.c -o main\n```\n\n## Compiler steps\n```bash\n# Step 1: My C to Preprocessed C\n# We\'ll dump the output into its own file. The preprocessor extends \n# macros, header files, etc.\ngcc -std=c99 -E main.c > main.i\n\n# Step 2: Preprocessed to Assembly Language\n# This take output.i and create output.s\ngcc -std=c99 -S main.i \n\n# Step 3: Assembly to Machine Code\n# This will take output.s and create output.o\ngcc --std=c99 -c main.s\n\n# Step 4: Run the linker\n# Inputs output.o and create an executable. If executable name is \n# not specified, it\'ll be named a.out, otherwise, it will be named \n# the specified output\ngcc --std=c99 -o main main.o\n```\n\n## Frequently used flags\n```bash\n-g         # Compile with debugging info for GDB\n-c         # Compiles only, without linking\n-S         # Generates assembly code\n-O3        # Optimizes as much as possible\n-o         # Specifies the name of the output file\n-Wall      # Turns on all warnings\n-llibrary  # Adds support for library when linking \n-std=c99   # Use C99 standard\n-std=gnu99 # Use C99 standard with GNU extensions\n```\n\n## Linking files together\n```bash\n# My Directory\n.\nâââ main.c\nâââ source1.c\nâââ source2.c\nâââ sources.h\n```\n```c\n// main.c\n#include <stdio.h>\n#include \"sources.h\"\n\nint main(void) {\n  hello_from_source1();\n  hello_from_source2();\n  return 0;\n}\n```\n```c\n// source1.c\n#include <stdio.h>\n\nvoid hello_from_source1(void)\n{\n    printf(\"Hello from source1.c\\n\");\n}\n```\n```c\n// source2.c\n#include <stdio.h>\n\nvoid hello_from_source2(void)\n{\n    printf(\"Hello from source2.c\\n\");\n}\n```\n```c\n// sources.h\nvoid hello_from_source1(void);\nvoid hello_from_source2(void);\n```\n```bash\n# Compile all files and link them together\ngcc --std=c99 -o main main.c source1.c source2.c\n```\n```bash\n# Run the executable\n./main\n# stdout: Hello from source1.c\n# stdout: hello from source2.c\n```\n## Compiling and linking seperately\nSeperate compilation is useful when one object file source code is not changing frequently. Suppose `source1.c` and `source2.c` are not changing frequently, but `main.c` is. We can compile `source1.c` and `source2.c` once then instead of compiling them every time we make a change to `main.c`, we just link them in the final step of the compilation process.\n```bash\n# Compile source1.c and source2.c\ngcc --std=c99 -c source1.c # > source1.o\ngcc --std=c99 -c source2.c # > source2.o\n\n# When we want to compile main.c..\ngcc --std=c99 -c main.c # > main.o\ngcc --std=c99 -o main main.o source1.o source2.o # > main (executable)\n```\n## Creating a library file\n```bash\n# STATIC library from two sources, creates libUtil.a\nar -r libSources.a source1.o source2.o\n\n# DYNAMIC library from two sources, creates libUtil.so\ngcc -shared -o libSources.so source1.o source2.o\n\n# DYNAMIC library for mac\ngcc -shared -o libSources.dylib source1.o source2.o \n```\n','gcc-snippets'),(7,'---\ncategory: General\ntitle: Git Reference\ndescription: A reference for common Git operations and commands.\ndate: 2023-09-17\ntags:\n  - Git\n---\n\n## Pushing a local repo upstream for the first time\n```bash\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin https://github.com/bgevko/repo-name.git\ngit push -u origin main\n```\nTo be continued...\n','git-cheatsheet'),(8,'---\ncategory: Web Development\ntitle: HTTP Status Codes\ndescription: A reference for common HTTP status codes.\ndate: 2023-10-06\ntags:\n  - HTTP\n---\n\n## 100 - 199: Info\n`100 Continue`\nTells the client their request is partially complete.\n\n`102 Processing` Tells the client the request has been received and it\'s processing, but no response is available yet.\n\n## 200 - 299: Success\n`200 OK` Request has succeeded.\n\n`201 Created` Request was a success and a new resource was created.\n\n`204 No Content` Request succeeded, but there is no content to send back.\n\n## 300 - 399: Redirection\n\n`301 Moved Permanently` Permanent change in URL, the new URL is given in the response.\n\n`302 Found Temporary` change in RUL, the new URL is given in the response.\n\n`307 Temporary Redirect` Same as `302`, but the same request must be used in the following request. If `POST` was used in the first request, `POST` must be used in the second request, etc.\n\n`308 Permanent Redirect` Same as `301`, but the same request must also be used here.\n\n## 400 - 499: Client Error\n`400 Bad Request` Server won\'t process a request due to a client error.\n\n`401 Unauthorized` The client must authenticate itself to get the requested response.\n\n`403 Forbidden` The client\'s identity is known to the server, but the requested information is not authorized.\n\n`404 Not Found` Endpoint or URL doesn\'t exist. The server can send this instead of `403` as well to hide the existence of a resource.\n\n`429 Too Many Requests` The user has sent too many requests in a given amount of time.\n\n## 500 - 599: Sever Error\n`500 Internal Server Error` The server encountered an unknown error.\n','http-status-codes'),(9,'---\ncategory: Web Development\ntitle: HTTPS Certbot\ndescription: How to create a free HTTPS certificate with Certbot.\ndate: 2023-10-05\ntags:\n  - Linux\n---\n\nI learned how to do this for my old site, which was running on a \nDigital Ocean and configured with `NGINX`. Below, I recorded the process, \nmostly for my own reference.\n\n1. Install Certbot\n```bash\nsudo apt install certbot python3-certbot-nginx\n```\n\n2. Create the cert. `school.bgevko.com` is the example domain.\n```bash\nsudo certbot --nginx -d school.bgevko.com\n```\n\n3. Set up automatic renewal\n```bash\nsudo certbot renew --dry-run\n```\n\n4. Restart NGINX\n```bash\nsudo systemctl restart nginx\n```\n\nAnd that\'s it! Certbot will automatically renew the certificate when it\'s close to expiring.\nCerbot creates a cron job under the hood. You can check it with:\n```bash\ncat /etc/cron.d/certbot\n```\n','https-certbot'),(10,'---\ncategory: Linux\ntitle: Linux Cheatsheet\ndescription: A reference for common Linux commands.\ndate: 2023-11-01\ntags:\n  - Linux\n---\n\n## Fundamentals\n- `pwd`: Print working directory.\n- `ls`: List directory contents.\n- `cd <directory>`: Change directory.\n- `touch <filename>`: Create an empty file.\n- `mkdir <directory>`: Create a directory.\n- `rm <filename>`: Remove a file.\n- `rm *.<extension>`: Removes all files with specified extension\n- `rm -r <directory>`: Remove a directory recursively.\n- `mv <source> <destination>`: Move or rename files/directories.\n- `mv ^exception <destination>`: Move everything but the exception into the destination\n- `rm -rf *(D)`: Remove (Delete) all files in directory, including hidden files\n- `cp <source> <destination>`: Copy files to destination\n- `cp -rp <dir> <destionation>` Copy dir and preserve permissions (and other attributes) to destination\n- `chmod +x exetutable.sh`: Enables a file to be executed.\n\n## User Management\n- `whoami`: Print the current user name\n- `id`: Print real and effective user and group IDs\n- `useradd <username>`: Add a new user.\n- `userdel <username>`: Delete a user.\n- `passwd <username>`: Set or change password for a user.\n- `id <username>`: Display user and group ID.\n- `groups <username>`: Show groups a user belongs to.\n- `sudo <command>`: Run a command as another user (default is root).\n- `su - <username>`: Switch user.\n\n## Shutting Down and Rebooting\n- `shutdown -h now`: Immediately shut down the system\n- `shutdown -r now`: Immediately restart the system\n- `shutdown -h +m`: Shut down the system in `m` minutes\n- `reboot`: Restart the system (equivalent to `shutdown -r now`)\n- `poweroff`: Power off the system (equivalent to `shutdown -h now`)\n- `halt`: Halt the system\n\n## Systemctl Commands\n- `systemctl start <service>`: Start a service.\n- `systemctl stop <service>`: Stop a service.\n- `systemctl restart <service>`: Restart a service.\n- `systemctl reload <service>`: Reload service configuration without stopping.\n- `systemctl status <service>`: Check the status of a service.\n- `systemctl enable <service>`: Enable a service to start at boot.\n- `systemctl disable <service>`: Disable a service from starting at boot.\n\n## Networking\n- `ip addr`: Show IP addresses of all network interfaces\n- `ip route`: Show system\'s routing table\n- `netstat`: Show network connections, routing tables, interface statistics, etc.\n- `ss`: Utility to investigate sockets\n- `ping <host>`: Send ICMP ECHO_REQUEST to network hosts\n- `traceroute <host>`: Show the route packets take to a network host\n\n## SSH\n- `ssh <username>@<host>`: Connect to a host as a user.\n- `ssh-keygen`: Generate an SSH key pair.\n- `ssh-copy-id <username>@<host>`: Copy public SSH key to a host for passwordless login.\n- `scp <source> <username>@<host>:<destination>`: Secure copy file/directory to a remote host.\n- `systemctl restart sshd`: Restart the SSH service.\n- `systemctl status sshd`: Check the status of the SSH service.\n- `~/.ssh/id_rsa`: Default private SSH key location.\n- `~/.ssh/id_rsa.pub`: Default public SSH key location.\n- `~/.ssh/authorized_keys`: File containing public keys allowed to connect.\n- `eval \"$(ssh-agent -s)\"`: Start the SSH agent in the background.\n- `ssh-add ~/.ssh/id_rsa`: Add your private key to the SSH agent.\n- `ssh-add -l`: List keys added to SSH agent.\n- `ssh-add -D`: Remove all keys from the SSH agent.\n\n## Updates and Package Management\n- `sudo apt update`: Update the package list\n- `sudo apt upgrade`: Upgrade all upgradable packages\n- `sudo apt dist-upgrade`: Upgrade packages and handle dependencies\n- `sudo apt autoremove`: Remove unnecessary packages\n- `sudo apt install <package-name>`: Install a package\n- `sudo apt remove <package-name>`: Remove a package\n\n## Commmon Directories\n- **TMUX**: `~/.tmux.conf`\n- **Zsh**: `~/.zshrc`\n- **Bash**: `~/.bashrc`\n- **NGINX Settings**: `/etc/nginx/nginx.conf`\n- **NGINX Sites**: `/etc/nginx/sites-available`\n- **NGINX Sites Enabled**: `/etc/nginx/sites-enabled`\n- **SSHD Config**: `/etc/ssh/sshd_config`\n- **SSH Config**: `/etc/ssh/ssh_config`\n- **Private SSH Keys**: `~/.ssh/id_rsa`\n- **Public SSH Keys**: `~/.ssh/id_rsa.pub`\n- **Authorized Keys**: `~/.ssh/authorized_keys`\n','linux-cheatsheet'),(11,'---\ncategory: Linux\ntitle: Linux Tricks\ndescription: Useful Linux commands that I\'m gradually accumulating.\ndate: 2023-11-01\ntags:\n  - Linux\n---\n\n## Finding things\n- `fd -t f \"Linux Cheatsheet\"`: Finds the file starting from the current dir\n- `fd -t d \"Dir name\"`: Finds a directory starting from the current dir\n## Copy STDOUT to clipboard (macOS)\n- `<command> | pbcopy`: Copies output of command to clipboard\n## Check Command History\n- `history | grep <command>`: Shows the entire history of a given command\n## Compress and Extract using Tar\n- `tar -xvf filename.tar`: Extracts .tar into current dir\n- `tar czvf file.tar.gz <directory>`: Compresses a file or directory\n\n## Redirection and piping\n- `command > file`: Redirects the output of a command to a file\n- `command >> file`: Appends the output of a command to a file\n- `command < file`: Redirects the input of a command from a file\n- `command1 | command2`: Pipes the output of command1 to the input of command2\n\nYou can mix and match:\n```bash\ngrep \"search_term\" input.txt | sort | uniq > output.txt\n```\n- `grep`: Searches for a pattern in `input.txt`\n- `| sort`: Takes the output of `grep` and sorts it\n- `| uniq`: Takes the output of `sort` and removes duplicates\n- `> output.txt`: Takes the output of `uniq` and writes it to `output.txt`\n\nHere\'s another example:\n```bash\ncat < input.txt | grep \"search_term\" | sort > output.txt\n```\n- `cat < input.txt`: Takes the contents of `input.txt` and passes it to `cat`\n- `| grep \"search_term\"`: Takes the output of `cat` and searches for a pattern\n- `| sort`: Takes the output of `grep` and sorts it\n- `> output.txt`: Takes the output of `sort` and writes it to `output.txt`\n\n## Processes\n```bash\n# Finding Processes\nps aux # List all processes\nps aux | grep <name> # List all processes with <name>\npgrep -f <name> # List all processes with <name>\nps aux | grep Z # List all zombie processes\n```\n\n```bash\n# Killing Processes\nkill <pid> # Kill process with <pid>\nkill -9 <pid> # Kill process with <pid> (force)\nkillall <name> # Kill all processes with <name>\nkill %<number> # Kill background process <number>\n# Other commands work with %<number> as well\n```\n```bash\n# Background Processes\ncommand & # Run command in background\njobs # List all background processes\nfg <job> # Bring background process <job> to foreground\nfg %<number> # Bring background process <number> to foreground\nbg <job> # Resume background process <job>\nbg %<number> # Resume background process <number>\n```\n','linux-tricks'),(12,'---\ncategory: Python\ntitle: Python Cheatsheet\ndescription: A reference to common Python functions.\ndate: \"2023-11-01\"\ntags:\n  - Python\n---\n\n## Strings\n```python\nmy_string.upper()\nmy_string.upper(): # Makes string uppercase.\nmy_string.lower(): # Makes string lowercase.\nmy_string.isalpha(): # Returns True if string is alphabetic.\nmy_string.isalnum(): # Returns True if string is alhpanumeric.\n\n# ASCII Value of a string\nord(my_string) Returns the ascii value of a string.\n\n# Reverse a string\nmy_string[::-1]\n\n# Split a string a list of characters\nlist(my_string)\n\n# Split a string based on a delimiter\nmy_string.split(\" \")\n```\n## Lists\n```python\n# Enumerate\nfor count, item in enumerate(iterable, start_index):\n	print(count)\n	print(item)\n\n# Note, start_index only affects where count starts. All items are still iterated over.\n\n# Sort\nlist.sort(key=func, reverse=True)\n\n# List Slicing\nsublist = list[start:stop]\nsublist = list[:stop] # From beginning to specified index\nsublist = list[start:] # From specified index to stop\nsublist = list[start:stop:step] # From start to stop, stepping by step\nsublist = list[::step] # From beginning to end, stepping by step\nsublist = list[start::step] # From start to end, stepping by step\nsublist = list[:] # Copy of list\nsublist = list[-1] # Last item in list\nsublist = list[-2] # Second to last item in list\nsublist = list[-2:] # Last two items in list\nsublist = list[:-2] # Everything except last two items\nsublist = list[::-1] # Reversed list\n```\n\n## Dictionaries\n```python\n# Remove elements\nmy_dict.clear() # Removes all items from dictionary\nmy_dict.pop(key, default) # Removes specified key and returns its value, or default if key not in dictionary\nmy_dict.popitem() # Removes and returns the last inserted key-value pair\n\n# Copy elements\nother_dict = my_dict.copy() # Returns a copy of my_dict\nother_dict = my_dict.fromkeys(keys, value) # New dictionary from specified keys and value\n\n# Get elements\nmy_dict.get(key, default) # Returns value of key, or default if key not in dictionary\nmy_dict.setdefault(key, default) # Returns value of key. If the value doesn\'t exit, inserts the key with the specified value\nmy_dict.items() # Returns the dictionary\'s key-value pairs as a list of tuples \nmy_dict.keys() # Returns the dictionary\'s keys as a list\nmy_dict.values() # Returns the dictionary\'s values as a list\n\n# Update elements\nmy_dict.update(other_dict) # Updates my_dict with the key-value pairs from other_dict\n```\n## Sets\n```python\n# Set Size\nlen(set)\n\n# Add\nset.add(item)\n\n# Remove\nset.remove(item) # Raises KeyError if item not in set\n\n# Discard\nset.discard(item) # Does not raise KeyError if item not in set\n\n# Pop\nset.pop() # Removes and returns an arbitrary element from set\n\n# Clear\nset.clear() # Removes all elements from set\n\n# Union\nset.union(set1, set2, set3) # Returns a new set with all items from all sets\n\n# Intersection\nset.intersection(set1, set2, set3) # Returns a new set with items that are in all sets\n\n# Difference\nmy_set.difference(set2) # Returns a new set with elements in my_set but not in set2\n\n# Symmetric Difference\nmy_set.symmetric_difference(set2) # Returns a new set with elements in either my_set or set2 but not both\n\n# Update\nmy_set.update(set2) # Adds all elements of set2 to my_set\n\n# Intersection Update\nmy_set.intersection_update(set2) # Removes all elements of my_set that are not in set2\n\n# Difference Update\nmy_set.difference_update(set2) # Removes all elements of set2 from my_set\n\n# Symmetric Difference Update\nmy_set.symmetric_difference_update(set2) # Adds all elements in set2 that are not in my_set, and removes all elements in my_set that are not in set2\nmy_set.symmetric_difference_update(set2) # Adds all elements in set2 that are not in my_set, and removes all elements in my_set that are not in set2\n\n# Is Subset\nmy_set.issubset(set2) # Returns True if all elements of my_set are in set2\n\n# Is Superset\nmy_set.issuperset(set2) # Returns True if all elements of set2 are in my_set\n\n# Is Disjoint\nmy_set.isdisjoint(set2) # Returns True if my_set has no elements in common with set2\n```\n\n## Comprehensions\n```python\n# List Comprehension\nnewlist = [x for x in range(10)]\nnewlist = [x for x in range(10) if x < 5]\nnewlist = [x.upper() for x in fruits]\nnewlist = [x if x != \"banana\" else \"orange\" for x in fruits]\n\n# Dict Comprehension\nnewdict = {key: value for vars in iterable}\nnewdict = {x: x**2 for x in range(10)}\nnewdict = {x: x**2 for x in range(10) if x%2 == 0}\nnewdict = {fruit: \'yellow\' if fruit == \'banana\' else \'not yellow\' for fruit in fruits}\nnewdict = {value: key for key, value in original_dict.items()} # Invert dict\n```\n\n','python-cheatsheet'),(13,'---\ncategory: Web Development\ntitle: Reverse Proxy\ndescription: How to set up a reverse proxy with NGINX\ndate: \"2023-11-16\"\ntags:\n  - Linux\n  - NGINX\n---\n\nIn this example, I\'ll set up an instance of Node for general use on a virtual server and open it up to the public internet using NGINX as a reverse proxy.\n\n### Configuration File\n---\nFirst, I\'ll create a new file called `dev` in the `sites-available` directory.\n```bash\nsudo nvim /etc/nginx/sites-available/dev\n```\n\nThen, I\'ll add the following:\n```nginx\nserver {\n    listen 80;\n    server_name dev.bgevko.com;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \'upgrade\';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n```\nA few notes here:\n- `dev.bgevko.com` is the subdomain I own. This domain is pointed to the IP address of the virtual server.\n- `localhost:3000` is the address of the Node instance I want to open up to the public internet.\n\n### Enabling the Configuration\n---\nNext, I\'ll enable the configuration by creating a symbolic link to the `sites-enabled` directory.\n```bash\nsudo ln -s /etc/nginx/sites-available/dev /etc/nginx/sites-enabled/\n```\nWe can check that the link was created successfully by running:\n```bash\nls -l /etc/nginx/sites-enabled/\n```\nYou should be able to see `dev` in the output.\n\nWe can restart NGINX to apply the changes:\n```bash\nsudo systemctl reload nginx\n```\n\nIf you get an error, you can check the logs by running:\n```bash\nsudo cat /var/log/nginx/error.log\n```\n#### Optional\nYou can secure your domain using Certbot. [How?](https://www.bgevko.com/blog/https-using-certbot)\n\n### Conclusion\n---\nYou\'re all set! If you run your Node instance on port 3000, you\'ll be able to access it at the domain you specified.\n','reverse-proxy'),(14,'---\ncategory: Linux\ntitle: TMUX Cheatsheet\ndescription: Common TMUX operations to dominate the command line.\ndate: 2023-09-28\ntags:\n  - TMUX\n  - Linux\n---\n\n<Callout>\nBeware that `C-a` is not the default prefix. It\'s `C-b`. I changed it to `C-a` in my `~/.tmux.conf` file.\n```bash\n# ~/.tmux.conf\nset -g prefix C-a\nunbind C-b\nbind C-a send-prefix\n...\n```\n</Callout>\n\n## Sessions\n- `tmux new -s <session>`:  Create a new session with a given name\n- `tmux list-sessions`:  List all sessions.\n- `C-a d`: Detach from the current session.\n- `tmux attach -t <session-name>`: Attach to an existing session.\n- `C-a $`: Rename the current session. \n- `tmux kill-session -t <session-name>` Delete a session\n\n## Window Management\n- `C-a c`: Create a new window.\n- `C-a w`: List all windows.\n- `C-a n`: Go to the next window.\n- `C-a p`: Go to the previous window.\n- `C-a <number>`: Switch to window by number (e.g., `C-a 0` switches to the first window).\n- `C-a ,`: Rename the current window.\n- `C-a &`: Close the current window.\n- `exit`: Also closes current window\n\n## Pane Management\n- `C-a Right` Split the current pane vertically.\n- `C-a Down` Split the current pane horizontally.\n- `C-a o`: Move to the next pane.\n- `C-a ;`: Toggle to the last active pane.\n- `C-a <arrow key>`: Switch to the pane in the direction of the arrow key.\n- `C-a C-<arrow key>`: Resize pane in the direction of the arrow key.\n- `C-a q`: Show pane numbers (press number to jump to that pane).\n- `C-a x`: Close the current pane.\n- `C-a z`: Zoom in (or out) of the current pane.\n\n## Miscellaneous\n- `C-a ?`: List all keybindings (very handy when you forget something).\n- `C-a t`: Show the time.\n- `C-a [`: Enter copy mode (navigate using arrow keys/Vim bindings, press `Space` to start selection and `Enter` to copy).\n- `C-a ]`: Paste the buffer.\n- `C-a r`: Reload `tmux` configuration (assuming it\'s in the default location, `~/.tmux.conf`).\n','tmux'),(15,'---\ncategory: Linux\ntitle: VIM Shortcuts\ndescription: How to exit VIM and other useful shortcuts.\ndate: 2023-09-29\ntags:\n  - Linux\n  - Vim\n---\n\n## Basic Movement\n   - `h`: Move left\n   - `j`: Move down\n   - `k`: Move up\n   - `l`: Move right\n \n## Word Movement\n   - `w`: Move to the start of the next word\n   - `b`: Move to the start of the previous word\n   - `e`: Move to the end of a word\n \n## Line Movement\n   - `0` or `^`: Move to the start of a line\n   - `$`: Move to the end of a line\n   - `< >`: indent left / right\n \n## Screen Movement\n   - `H`: Move to the top of the screen\n   - `M`: Move to the middle of the screen\n   - `L`: Move to the bottom of the screen\n   - `zz`: Center the screen on the cursor\n \n## File Movement\n   - `gg`: Go to the first line\n   - `G`: Go to the last line\n   - `:<number>`: Go to the specific line number\n \n## Text Object and Pair Movements\n   - `(` or `)`: Move between sentences.\n   - `{` or `}`: Move between paragraphs.\n   - `[[` or `]]`: Move between sections (useful in code).\n   - `%`: Jump to matching bracket (for `{`, `[`, `(` and their respective closing brackets).\n   - `ci(` or `ci)` or `ci{` or `ci}`: Change the content inside the parentheses or braces.\n   - `di(` or `di)`: Delete the content inside the parentheses without deleting the parentheses.\n \n## Word Movements Enhanced\n   - `W`, `B`, `E`: Like `w`, `b`, and `e` but they move by SPACE-separated words.\n \n## Jump Lists\n  - `Ctrl + o`: Jump back to previous (older) location.\n  - `Ctrl + i`: Jump forward to next (newer) location.\n\n## Marks\n  - `m<letter>`: Set a mark at the current position. `<letter>` can be any alphabetic character.\n  - `\'<letter>`: Jump to the start of the line where the mark `<letter>` was set.\n  - `<letter>`: Jump to the exact position where the mark `<letter>` was set.\n\n\n## Insert Mode\n  - `i`: Insert before cursor\n  - `I`: Insert at the beginning of the line\n  - `a`: Append after cursor\n  - `A`: Append at the end of the line\n  - `o`: Open (append) a new line below current line\n  - `O`: Open a new line above current line\n\n## Deletion\n  - `x`: Delete character under the cursor\n  - `X`: Delete character before the cursor\n  - `dd`: Delete current line\n  - `D`: Delete from cursor to the end of the line\n  - `dw`: Delete to the end of the word\n\n## Change\n  - `cw`: Change to the end of the word\n  - `c$`: Change to the end of the line\n  - `cc`: Change the entire line\n\n## Copy & Paste\n  - `yy` or `Y`: Yank (copy) the current line\n  - `p`: Paste below the cursor\n  - `P`: Paste above the cursor\n\n## Undo & Redo\n  - `u`: Undo\n  - `Ctrl + r`: Redo\n\n## Visual Mode\n- `v`: Start visual mode, move to select text\n- `V`: Select whole lines\n- `Ctrl + v`: Start block (column) mode\n\n## Search & Replace\n-  `/`: Search forward\n-  `?`: Search backward\n-  `n`: Repeat search in the same direction\n-  `N`: Repeat search in the opposite direction\n-  `:%s/old/new/g`: Replace all old with new throughout the file\n-  `:%s/old/new/gc`: Replace with confirmation\n\n## File Operations (How to Exit VIM)\n - `:w`: Save (write)\n - `:q`: Quit\n - `:wq` or `ZZ`: Save and quit\n - `:q!`: Quit without saving\n\n## Tabs & Windows\n - `:tabnew`: Open a new tab\n - `:tabclose`: Close current tab\n - `:tabnext` or `gt`: Navigate to next tab\n - `:tabprev` or `gT`: Navigate to previous tab\n - `:split` or `:sp`: Split window horizontally\n - `:vsplit` or `:vsp`: Split window vertically\n - `Ctrl + w`: Switch between windows\n\n## Miscellaneous\n - `.`: Repeat the last command\n - `*`: Search for the word under the cursor\n - `#`: Search for the word under the cursor (backwards)\n - `=`: Auto-indent current line or selection\n - `:noh`: Remove search highlighting\n','vim-shortcuts');
DROP TABLE IF EXISTS `ProjectPosts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ProjectPosts` (
  `postID` int NOT NULL AUTO_INCREMENT,
  `content` text NOT NULL,
  `slug` varchar(255) NOT NULL,
  PRIMARY KEY (`postID`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
INSERT INTO `ProjectPosts` VALUES (1,'---\nfeatured: true\ntitle: I rebuilt my website in Next.js 13\ndescription: After getting comfortable with React, I decided to pick up a modern React framework. This website is a result of my effort. In this article, I discuss the process and the challenges I faced while building this site.\ndate: \"2023-12-07\"\nimage: /cover-photos/next-js-cover.svg\ntags:\n  - NextJS\n  - React\n  - MDX\n---\n\n# Introduction\nThis is an article fully written in markdown, but not just any regular markdown, but MDX.\n','next-js-portfolio-project'),(2,'---\nfeatured: true\ntitle: I built a custom boilerplate tool.\ndescription: I built a general purpose boilerplate tool that pulls my premade templates from Github into whatever project I\'m working on.\ndate: \"2023-09-28\"\nimage: /cover-photos/boilers-proj-cover.svg\ntags:\n  - Python\n  - CLI\n---\n\n# Introduction\nThis is an article fully written in markdown, but not just any regular markdown, but MDX.\n','boilerplate-tool'),(3,'---\nfeatured: true\ntitle: I rendered a 3D scene in OpenGL.\ndescription: I built a 3D scene with Blender and rendered it in OpenGL.\ndate: \"2023-12-06\"\nimage: /cover-photos/opengl-project.svg\ntags:\n  - C\n  - OpenGL\n  - Graphics\n---\n\n# Introduction\nThis is an article fully written in markdown, but not just any regular markdown, but MDX.\n','opengl-project');
